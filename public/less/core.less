@import "reset.less";
@import "variables.less";
@import "mixins.less";
@import "utils.less";

body,html{
	height:100%;
	width:100%;
	margin:0;
	padding:0;
	background: #fff;
}

a{
	color:black;
	text-decoration: none;
	&:hover{
		text-decoration: none;
	}
	&visited{
		text-decoration: none;
	}
}

#main{
	height:inherit;
}

#intro{
	@divWidth:300px;
	@divHeight:100px;
	width:@divWidth;
	height: @divHeight;
	text-align: center;
	position: absolute;
	top:50%;
	left:50%;
	margin-top: -(@divHeight/2);
	margin-left: -(@divWidth/2);
	h1,h2{
		font-weight: 100;
		line-height: 0;
	}
	h1{
		font-size: 1.2em;
	}
	h2{
		font-size: 1.6em;
		font-style: italic;
		margin: -4px 0 40px 0;
	}
	p{
		margin-top: -3px;
	}
}



.sidebar{
	height:100%;
	width:@sidebarWidth;
	cursor: pointer;
	display: none;
}
#rightSide{
	float: right;
	position: relative;
	left:@sidebarWidth;
	.make-transition(0.2s);
	&.open{
		.make-transition(0.2s);
		left:0;
	}
}
#leftSide{
	float: left;
	position: relative;
	right:@sidebarWidth;
	.make-transition(0.2s);
	&.open{
		.make-transition(0.2s);
		right:0;
	}
}
@iterations: 15;
@tri-nav-size: 41.6px;
#bottom-nav{
	position: fixed;
	bottom:0;
	margin-left: auto;
	margin-right: auto;
	width:100%;
	#tri-nav{
		list-style-type: none;
		padding: 0;
		margin:0;
		margin-left: auto;
		margin-right: auto;
		width:@iterations * @tri-nav-size;
		
		
		& .bottom-tri{
			background-image:url('../img/triangles/bottom_nav.png');
			width:@tri-nav-size;
			height:36px;
			float:left;
			padding:0;
			margin:0;
			cursor: pointer;
		}	
	}
}



// helper class, will never show up in resulting css
// will be called as long the index is above 0
.loopingClass (@index) when (@index > 0) {

	// create the actual css selector, example will result in
	// .myclass_30, .myclass_28, .... , .myclass_1
	(~"#tri@{index}") {
		// your resulting css
		//my-property: -@index px;
		background-position:((@index - 1) * -@tri-nav-size) 0px;
	}

	// next iteration
	.loopingClass(@index - 1);
}

// end the loop when index is 0
.loopingClass (0) {}

// "call" the loopingClass the first time with highest value
.loopingClass (@iterations);























